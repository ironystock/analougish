package analougish

type Matrix struct {
	Charset *[]rune
	Bitmap  *[]uint8
	Name    string
	Rows    uint
	Cols    uint
}
type Segment struct {
}

type Display interface {
	Build() *Matrix
	Validate() error
	IsMatrix() bool
	IsSegment() bool
}

type MatrixChar struct {
	Char rune
	Cell uint64
}
type MatrixCharset struct {
	Charset *[]MatrixChar
}

// dot matrix display
// func generateCell() {
// 	for r := 0; r <= crs; r++ {
// 		//<div class="row">
// 		for c := 0; c <= ccs; c++ {
// 			//<div class="dot"></div>
// 		}
// 		//<div class="ndot"></div>
// 	}
// 	//<div class="nrow"></div>
// }

const chs = 70 //charset size [total characters]
func DotMatrix() [chs]rune {
	const crs = 5                //cell row size
	const ccs = 7                //cell col size
	const crm = ((1 << crs) - 1) //cell row bitmask

	//bitmask to extract each row
	// var rm [ccs]uint64
	// for i := 0; i < ccs; i++ {
	// 	rm[i] = crm << (crs * i)
	// }
	charset := [chs]rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '~', ' ', '_', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '!', '\\', '/', '*', '+', '-', '=', '<', '>', '%', '#', '$', '&', '?', ':', '(', ')', '@', '^', '\\', '"', ';'}
	chars5x7 := make(map[rune][ccs]uint8, chs)
	chars5x7['A'] = [ccs]uint8{0xE, 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11}
	chars5x7['B'] = [ccs]uint8{0x1E, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x1E}
	chars5x7['C'] = [ccs]uint8{0xE, 0x11, 0x10, 0x10, 0x10, 0x11, 0xE}
	chars5x7['D'] = [ccs]uint8{0x1C, 0x12, 0x11, 0x11, 0x11, 0x12, 0x1C}
	chars5x7['E'] = [ccs]uint8{0x1F, 0x10, 0x10, 0x1C, 0x10, 0x10, 0x1F}
	chars5x7['F'] = [ccs]uint8{0x1F, 0x10, 0x10, 0x1C, 0x10, 0x10, 0x10}
	chars5x7['G'] = [ccs]uint8{0xE, 0x11, 0x10, 0x17, 0x15, 0x11, 0xE}
	chars5x7['H'] = [ccs]uint8{0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11} //done
	chars5x7['I'] = [ccs]uint8{0xE, 0x4, 0x4, 0x4, 0x4, 0x4, 0xE}
	chars5x7['J'] = [ccs]uint8{0xE, 0x4, 0x4, 0x4, 0x4, 0x14, 0x08}
	chars5x7['K'] = [ccs]uint8{0x11, 0x11, 0x12, 0x1C, 0x12, 0x11, 0x11}
	chars5x7['L'] = [ccs]uint8{0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x1F}
	chars5x7['M'] = [ccs]uint8{0x11, 0x1B, 0x15, 0x11, 0x11, 0x11, 0x11}
	chars5x7['N'] = [ccs]uint8{0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11} //done
	chars5x7['O'] = [ccs]uint8{0xE, 0x11, 0x11, 0x11, 0x11, 0x11, 0xE}   //done
	chars5x7['P'] = [ccs]uint8{0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10}
	chars5x7['Q'] = [ccs]uint8{0xE, 0x11, 0x11, 0x11, 0x15, 0x13, 0xF}
	chars5x7['R'] = [ccs]uint8{0x1E, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x11}
	chars5x7['S'] = [ccs]uint8{0x2, 0x10, 0x10, 0xE, 0x1, 0x1, 0x1E}
	chars5x7['T'] = [ccs]uint8{0x1F, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4}
	chars5x7['U'] = [ccs]uint8{0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0xE}
	chars5x7['V'] = [ccs]uint8{0x11, 0x11, 0x11, 0x11, 0x11, 0xA, 0x4}
	chars5x7['W'] = [ccs]uint8{0x11, 0x11, 0x11, 0x15, 0x15, 0x1B, 0x11}
	chars5x7['X'] = [ccs]uint8{0x11, 0x11, 0xA, 0x4, 0xA, 0x11, 0x11}
	chars5x7['Y'] = [ccs]uint8{0x11, 0x11, 0xA, 0x4, 0x4, 0x4, 0x4}
	chars5x7['Z'] = [ccs]uint8{0x1F, 0x1, 0x2, 0x4, 0x8, 0x10, 0x1F}
	chars5x7['~'] = [ccs]uint8{0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F} //filled
	chars5x7[' '] = [ccs]uint8{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
	chars5x7['_'] = [ccs]uint8{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1F}
	chars5x7['0'] = [ccs]uint8{0xE, 0x11, 0x13, 0x15, 0x19, 0x11, 0xE}
	chars5x7['1'] = [ccs]uint8{0x2, 0x6, 0xA, 0x2, 0x2, 0x2, 0x2}
	chars5x7['2'] = [ccs]uint8{0xE, 0x11, 0x1, 0x2, 0x4, 0x8, 0x1F}
	chars5x7['3'] = [ccs]uint8{0xE, 0x11, 0x1, 0x6, 0x1, 0x11, 0xE}
	chars5x7['4'] = [ccs]uint8{0x2, 0x6, 0xA, 0x12, 0x1F, 0x2, 0x2}
	chars5x7['5'] = [ccs]uint8{0x1F, 0x10, 0x1E, 0x1, 0x1, 0x11, 0xE}
	chars5x7['6'] = [ccs]uint8{0xE, 0x11, 0x1, 0x1E, 0x11, 0x11, 0xE}
	chars5x7['7'] = [ccs]uint8{0x1F, 0x1, 0x2, 0x4, 0x8, 0x8, 0x8}
	chars5x7['8'] = [ccs]uint8{0xE, 0x11, 0x11, 0xE, 0x11, 0x11, 0xE}
	chars5x7['9'] = [ccs]uint8{0xE, 0x11, 0x11, 0xF, 0x1, 0x11, 0xE}
	chars5x7['!'] = [ccs]uint8{0x4, 0x4, 0x4, 0x4, 0x4, 0x0, 0x4}
	chars5x7['\\'] = [ccs]uint8{0x10, 0x10, 0x8, 0x4, 0x2, 0x1, 0x1}
	chars5x7['/'] = [ccs]uint8{0x1, 0x1, 0x2, 0x4, 0x8, 0x10, 0x10}
	chars5x7['*'] = [ccs]uint8{0x0, 0x15, 0xE, 0x1F, 0xE, 0x15, 0x0}
	chars5x7['+'] = [ccs]uint8{0x0, 0x4, 0x4, 0x1F, 0x4, 0x4, 0x0}
	chars5x7['-'] = [ccs]uint8{0x0, 0x0, 0x0, 0xE, 0x0, 0x0, 0x0}
	chars5x7['='] = [ccs]uint8{0x0, 0x0, 0x1F, 0x0, 0x1F, 0x0, 0x0}
	chars5x7['<'] = [ccs]uint8{0x2, 0x4, 0x8, 0x10, 0x8, 0x4, 0x2}
	chars5x7['>'] = [ccs]uint8{0x8, 0x4, 0x2, 0x1, 0x2, 0x4, 0x8}
	chars5x7['%'] = [ccs]uint8{0x18, 0x19, 0x2, 0x4, 0x8, 0x13, 0x3}
	chars5x7['#'] = [ccs]uint8{0xA, 0xA, 0x1F, 0xA, 0x1F, 0xA, 0xA}
	chars5x7['$'] = [ccs]uint8{0x4, 0xF, 0x14, 0xE, 0x5, 0x1E, 0x4}
	chars5x7['&'] = [ccs]uint8{0xE, 0x11, 0x11, 0xE, 0x14, 0x12, 0xD}
	chars5x7['?'] = [ccs]uint8{0xE, 0x11, 0x11, 0x2, 0x4, 0x0, 0x4}
	chars5x7[':'] = [ccs]uint8{0x0, 0x4, 0x0, 0x0, 0x0, 0x4, 0x0}
	chars5x7['('] = [ccs]uint8{0x4, 0x8, 0x8, 0x8, 0x8, 0x8, 0x4}
	chars5x7[')'] = [ccs]uint8{0x4, 0x2, 0x2, 0x2, 0x2, 0x2, 0x4}
	chars5x7['@'] = [ccs]uint8{0xE, 0x11, 0xA, 0xB, 0x1D, 0x19, 0xE}
	chars5x7['^'] = [ccs]uint8{0x4, 0xA, 0x11, 0x0, 0x0, 0x0, 0x0}
	chars5x7['\''] = [ccs]uint8{0x4, 0x8, 0xC, 0xC, 0x0, 0x0, 0x0}
	chars5x7['"'] = [ccs]uint8{0x12, 0x9, 0x1B, 0x1B, 0x0, 0x0, 0x0}
	chars5x7[';'] = [ccs]uint8{0x0, 0x4, 0x0, 0x0, 0x0, 0x4, 0x8}

	// 7 segment numeric display
	return charset
}

func SevenSegment() map[rune]uint8 {
	// 1-a 10-b 100-c 1000-d 10000-e 100000-f 1000000-g 10000000-.
	nums := map[rune]uint8{
		'0': 0x3F,
		'1': 0x9,
		'2': 0x5B,
		'3': 0x4F,
		'4': 0x66,
		'5': 0x6D,
		'6': 0x7D,
		'7': 0x7,
		'8': 0x7F,
		'9': 0x6F,
		'.': 0x80,
	}
	return nums
}
